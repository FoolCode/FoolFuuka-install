<?php

namespace Foolz\Autoupgrade;

class ContainerTypeInsertException extends \Exception {}
class ContainerTypeNotFoundException extends \Exception {}

/**
 * Allows defining container types like themes, plugins, modules
 */
class ContainerType
{
	/**
	 * Autoincrement from database
	 *
	 * @var  int
	 */
	public $type_id = 0;

	/**
	 * The pretty name of the ContainerType
	 *
	 * @var null|string
	 */
	public $name = null;

	/**
	 * The url-friendly name of the ContainerType
	 *
	 * @var null|string
	 */
	public $slug = null;

	/**
	 * The description of the container type
	 *
	 * @var null|string
	 */
	public $description = null;

	/**
	 * Wether the ContainerType should be hidden
	 *
	 * @var bool
	 */
	public $hidden = false;

	/**
	 * The preloaded objects
	 *
	 * @var null|array
	 */
	public static $preloaded = null;


	public static function structure()
	{
		return [
			'open' => ['type' => 'open'],
			'id' => [
				'type' => 'hidden',
				'database' => true,
			],
			'name' => [
				'type' => 'input',
				'label' => __('Name'),
				'database' => true,
			],
			'slug' =>  [
				'type' => 'input',
				'label' => __('Slug'),
				'database' => true,
			],
			'description' => [
				'type' => 'textarea',
				'label' => __('Description'),
				'database' => true,
			],
			'hidden' => [
				'type' => 'checkbox',
				'label' => __('Hidden'),
				'help' => __('Hide this type and all elements to normal users'),
				'database' => true
			],
			'submit' => [
				'type' => 'submit',
				'value' => __('Submit')
			],
			'close' => ['type' => 'close']
		];
	}

	/**
	 * Sets the static::$preloaded variable with all the container types
	 */
	public static function preload()
	{
		if (static::$preloaded !== null)
		{
			return;
		}

		try
		{
			$result = \Cache::get('fp.model.containertype.preload');
		}
		catch (\CacheNotFoundException $e)
		{
			$result = DC::qb()
				->select('*')
				->from(DC::p('container_types'), 'ct')
				->execute()
				->fetchAll();

			\Cache::set('fp.model.containertype.preload', $result, 900);
		}

		foreach ($result as $item)
		{
			$new = new static();

			foreach ($item as $k => $i)
			{
				$new->$k = $i;
			}

			static::$preloaded[$new->slug] = $new;
		}
	}


	public static function save($data)
	{
		if (isset($data['id']))
		{
			$old = DC::qb()
				->select('*')
				->from(DC::p('container_types'), 'ct')
				->where('id = :id')
				->setParameter(':id', $data['id'])
				->execute()
				->fetch();

			if ( ! $old)
			{
				throw new ContainerTypeNotFoundException(__('Container type not found.'));
			}

			$query = DC::qb()
				->update(DC::p('container_types'));

			foreach ($data as $key => $item)
			{
				$query->set(DC::forge()->quoteIdentifier($key), DC::forge()->quote($item));
			}

			$query->where('id = :id')
				->setParameter(':id', $data['id'])
				->execute();
		}
		else
		{
			// @todo validation to check if all the content is sent

			$old = DC::qb()
				->select('*')
				->from(DC::p('container_types'), 'ct')
				->where('name = :name')
				->orWhere('slug = :slug')
				->setParameters([':name' => $data['name'], ':slug' => $data['slug']])
				->execute()
				->fetch();

			if ($old)
			{
				if ($old['name'] === $data['name'])
				{
					throw new ContainerInsertException(__('There\'s already a container type with the same name.'));
				}

				if ($old['slug'] === $data['slug'])
				{
					throw new ContainerInsertException(__('There\'s already a container type with the same slug.'));
				}
			}

			DC::forge()->insert(DC::p('container_types'), $data);
		}

		static::clearCache();
	}


	/**
	 * Cleans all the cache values generated by the class
	 */
	public static function clearCache()
	{
		\Cache::delete('fp.model.containertype.preload');
	}

	/**
	 * Returns the array of container types
	 *
	 * @return array the container types with as key the slug
	 */
	public static function getAll()
	{
		static::preload();
		return static::$preloaded;
	}

	/**
	 * Returns the container type object by slug
	 *
	 * @param string $slug
	 * @return ContainerType
	 * @throws ContainerTypeNotFoundException
	 */
	public static function getBySlug($slug)
	{
		static::preload();
		if (isset(static::$preloaded[$slug]))
		{
			return static::$preloaded[$slug];
		}

		throw new ContainerTypeNotFoundException(__('The container type you were looking for does not exist'));
	}

	public static function getById($id)
	{
		static::preload();

		foreach (static::$preloaded as $item)
		{
			if ($item->id == $id)
			{
				return $item;
			}
		}

		throw new ContainerTypeNotFoundException(__('The container type you were looking for does not exist'));
	}
}